#include<iostream>
#include<math.h>
#include<iomanip>
using namespace std;

//filler matrix dimension
const int m = 5;

void LUdecomposition(double a[m][m], double l[m][m], double u[m][m],double multLU[m][m], int n) {
   int i,j,k;


  for (i = 0; i < n; i++) {
//fill diagonal elements in L matrix with 1s    
        l[i][ i] = 1;
     }
      for (j = 0; j < n; j++)
      {
            for (i = 0; i < n; i++)
            {
                  if (i >= j)
                  {
                        u[j][i] = a[j][i];
                        for(k = 0; k < j; k++){
                             u[j][ i] = u[j][ i] -  u[k][ i] * l[j][ k];
                        }
                }
                  if (i > j)
                  {
                        l[i][j] = a[i][ j];
                        for (k = 0; k < j; k++) {
                             l[i][j] = l[i][ j] - u[k][j] * l[i][ k];
                        }
                   l[i][ j] = l[i] [j] / u[j][ j];
                  }
            }
      }


//compute product of L and U matrices to prove that given A is returned

double sum;

for (int i=0; i<n; i++){

        for(int j=0;j<n;j++) {

                sum =0;
                for (int k =0; k<n; k++){

                sum =  sum + l[i][k] * u[k][j];

                }

                multLU[i][j]=sum;

        }
}

}
